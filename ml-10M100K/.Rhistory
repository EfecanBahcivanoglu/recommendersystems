all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobx[[i]], ngroup = ngroup[[i]])
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
}
time <- list()
nobs <- list()
ngroup <- list()
get.time <- function(t) {
with(as.list(summary(t)), user + system)
}
all_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
nobs[[i]] <- nrow(subsample)
ngroup[[i]] <- nlevels(subsample$group)
iter_start_time <- proc.time()
time[[i]] <- system.time({
model <- mhglm(y ~ x - 1 + (z - 1 | group), data = subsample,
family=binomial)
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobs[[i]], ngroup = ngroup[[i]])
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
}
time <- list()
nobs <- list()
ngroup <- list()
get.time <- function(t) {
with(as.list(summary(t)), user + system)
}
all_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
nobs[[i]] <- nrow(subsample)
ngroup[[i]] <- nlevels(subsample$group)
iter_start_time <- proc.time()
time[[i]] <- system.time({
model <- mhglm(y ~ x - 1 + (z - 1 | group), data = subsample,
family=binomial)
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobs[[i]], ngroup = ngroup[[i]])
}
data <- readRDS("data.rds")
set.seed(123)  # Setting a seed for reproducibility
total_rows <- nrow(data)
shuffled_indices <- sample(1:total_rows)
# Step 2: Determine the number of data points per subsample and divide the indices
points_per_sample <- ceiling(total_rows / 10)
subsample_indices <- split(shuffled_indices, rep(1:10, each=points_per_sample, length.out=total_rows))
# Step 3: Create the subsamples
subsamples_obs <- lapply(subsample_indices, function(indices) {
data[indices, ]
})
saveRDS(subsamples_obs, "subsamples_random.rds")
library('mbest')
library("devtools", quietly=TRUE)
library("methods", quietly=TRUE)
load_all("../../lib/mbest", export_all=FALSE, quiet=TRUE)
#subsamples <- readRDS("subsamples_unique_user.rds")
subsamples <- readRDS("subsamples_random.rds")
set.seed(31337)
time <- list()
nobs <- list()
ngroup <- list()
get.time <- function(t) {
with(as.list(summary(t)), user + system)
}
all_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
nobs[[i]] <- nrow(subsample)
ngroup[[i]] <- nlevels(subsample$group)
iter_start_time <- proc.time()
time[[i]] <- system.time({
model <- mhglm(y ~ x - 1 + (z - 1 | group), data = subsample,
family=binomial)
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobs[[i]], ngroup = ngroup[[i]])
}
#subsamples <- readRDS("subsamples_unique_user.rds")
subsamples <- readRDS("subsamples_random.rds")
set.seed(31337)
time <- list()
nobs <- list()
ngroup <- list()
get.time <- function(t) {
with(as.list(summary(t)), user + system)
}
all_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
nobs[[i]] <- nrow(subsample)
ngroup[[i]] <- nlevels(subsample$group)
iter_start_time <- proc.time()
time[[i]] <- system.time({
model <- mhglm(y ~ x - 1 + (z - 1 | group), data = subsample,
family=binomial)
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobs[[i]], ngroup = ngroup[[i]])
}
data <- readRDS("data.rds")
time <- system.time({
fit <- with(data, mhglm.fit(x, z, y, group, family=binomial()))
})
library("MASS", quietly=TRUE) # for kde2d
mhglm <- readRDS("mhglm_alldata.rds")
fixef <- fixef.mhglm(fit)
ranef <- ranef.mhglm(fit)[[1]]
saveRDS(list(time=time, fit=fit, fixef=fixef, ranef=ranef),
"mhglm_alldata.rds")
mhglm <- readRDS("mhglm_alldata.rds")
fit <- mhglm$fit
ny <- by(rep(1, length(fit$y)), fit$group, sum)
ix <- ny >= 100
fixef <- mhglm$fixef
ranef <- mhglm$ranef
mean <- fixef[match(colnames(ranef), names(fixef))]
coef <- ranef + matrix(1, nrow(ranef), 1) %*% matrix(mean, 1, ncol(ranef))
genreaction <- -rowSums(coef[,c("genrechildren", "genrecomedy", "genredrama")])
coef <- cbind(coef[,1,drop=FALSE], genreaction, coef[,-1])
panel.hist <- function(x, col, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, breaks="Scott", plot = FALSE)
d <- density(x)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
#rect(breaks[-nB], 0, breaks[-1], y, col=rgb(55, 126, 184, max=255), ...)
polygon(d$x, d$y / max(d$y), col=rgb(55, 126, 184, max=255), border="black", ...)
}
panel.contour <- function(x, y, ...)
{
d <- kde2d(x, y, n=50)
z <- sort(d$z, dec=TRUE)
cz <- cumsum(z)
z0 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-0.5))))]
z1 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.0))))]
z2 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.5))))]
z3 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.0))))]
z4 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.5))))]
#z5 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-3.0))))]
points(x, y, ...)
contour(d, add=TRUE, nlevels=5, drawlabels=FALSE, levels=c(z0,z1,z2,z3,z4))
}
#pdf("ml-10m-coef-pairs.pdf")
png("ml-10m-coef-pairs.png", width=7, height=7, units="in", res=150)
#pdf("ml-10m-coef-pairs.pdf")
png("ml-10m-coef-pairs.png", width=7, height=7, units="in", res=150)
par(ps=10, las=1)
pairs(coef[ix,],
labels = c("Intercept", "Action", "Children", "Comedy", "Drama"),
#col=rgb(55, 126, 184, 100, max=255), pch=1,
col=rgb(55, 126, 184, max=255),
cex=.10, pch=20,
diag.panel = panel.hist,
panel.contour,
gap=.25)
pairs(coef[ix,],
labels = c("(Intercept)", "genreaction", "genrechildren", "genrecomedy", "genredrama"),
#col=rgb(55, 126, 184, 100, max=255), pch=1,
col=rgb(55, 126, 184, max=255),
cex=.10, pch=20,
diag.panel = panel.hist,
panel.contour,
gap=.25)
par(ps=5, las=1)
pairs(coef[ix,],
labels = c("(Intercept)", "genreaction", "genrechildren", "genrecomedy", "genredrama"),
#col=rgb(55, 126, 184, 100, max=255), pch=1,
col=rgb(55, 126, 184, max=255),
cex=.10, pch=20,
diag.panel = panel.hist,
panel.contour,
gap=.25)
current_usr <- par("usr")
panel.hist <- function(x, col, ...) {
# Calculate the histogram and density
h <- hist(x, breaks = "Scott", plot = FALSE) # get histogram counts without plotting
d <- density(x) # density calculation
# Calculate the maximum y-value for plotting (based on the histogram)
max_y <- max(h$counts)
# Plot the histogram
barplot(h$counts, space = 0, col = col, xlim = range(h$breaks), ylim = c(0, max_y), ...)
# Scale the density to fit the histogram and overlay it
d$y <- d$y * max_y / max(d$y)
lines(d, col = "black", ...)
}
panel.contour <- function(x, y, ...)
{
d <- kde2d(x, y, n=50)
z <- sort(d$z, dec=TRUE)
cz <- cumsum(z)
z0 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-0.5))))]
z1 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.0))))]
z2 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.5))))]
z3 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.0))))]
z4 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.5))))]
#z5 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-3.0))))]
points(x, y, ...)
contour(d, add=TRUE, nlevels=5, drawlabels=FALSE, levels=c(z0,z1,z2,z3,z4))
}
#pdf("ml-10m-coef-pairs.pdf")
png("ml-10m-coef-pairs.png", width=7, height=7, units="in", res=150)
par(ps=5, las=1)
pairs(coef[ix,],
labels = c("(Intercept)", "genreaction", "genrechildren", "genrecomedy", "genredrama"),
#col=rgb(55, 126, 184, 100, max=255), pch=1,
col=rgb(55, 126, 184, max=255),
cex=.10, pch=20,
diag.panel = panel.hist,
panel.contour,
gap=.25)
panel.hist <- function(x, col, ...) {
# Calculate the histogram and density
h <- hist(x, breaks = "Scott", plot = FALSE) # get histogram counts without plotting
d <- density(x) # density calculation
# Calculate the maximum y-value for plotting (based on the histogram)
max_y <- max(h$counts)
# Plot the histogram
barplot(h$counts, space = 0, col = col, xlim = range(h$breaks), ylim = c(0, max_y))
# Scale the density to fit the histogram and overlay it
d$y <- d$y * max_y / max(d$y)
lines(d, col = "black", ...)
}
panel.contour <- function(x, y, ...)
{
d <- kde2d(x, y, n=50)
z <- sort(d$z, dec=TRUE)
cz <- cumsum(z)
z0 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-0.5))))]
z1 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.0))))]
z2 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.5))))]
z3 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.0))))]
z4 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.5))))]
#z5 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-3.0))))]
points(x, y, ...)
contour(d, add=TRUE, nlevels=5, drawlabels=FALSE, levels=c(z0,z1,z2,z3,z4))
}
#pdf("ml-10m-coef-pairs.pdf")
png("ml-10m-coef-pairs.png", width=7, height=7, units="in", res=150)
par(ps=5, las=1)
pairs(coef[ix,],
labels = c("(Intercept)", "genreaction", "genrechildren", "genrecomedy", "genredrama"),
#col=rgb(55, 126, 184, 100, max=255), pch=1,
col=rgb(55, 126, 184, max=255),
cex=.10, pch=20,
diag.panel = panel.hist,
panel.contour,
gap=.25)
panel.hist <- function(x, col, ...) {
# Calculate the histogram and density
h <- hist(x, breaks = "Scott", plot = FALSE) # get histogram counts without plotting
d <- density(x) # density calculation
# Calculate the maximum y-value for plotting (based on the histogram)
max_y <- max(h$counts)
# Plot the histogram
barplot(h$counts, space = 0, col = col, ylim = c(0, max_y), ...)
# Scale the density to fit the histogram and overlay it
d$y <- d$y * max_y / max(d$y)
lines(d, col = "black", ...)
}
panel.contour <- function(x, y, ...)
{
d <- kde2d(x, y, n=50)
z <- sort(d$z, dec=TRUE)
cz <- cumsum(z)
z0 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-0.5))))]
z1 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.0))))]
z2 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-1.5))))]
z3 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.0))))]
z4 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-2.5))))]
#z5 <- z[min(which(cz > sum(z) * (1 - 2 * pnorm(-3.0))))]
points(x, y, ...)
contour(d, add=TRUE, nlevels=5, drawlabels=FALSE, levels=c(z0,z1,z2,z3,z4))
}
#pdf("ml-10m-coef-pairs.pdf")
png("ml-10m-coef-pairs.png", width=7, height=7, units="in", res=150)
par(ps=5, las=1)
pairs(coef[ix,],
labels = c("(Intercept)", "genreaction", "genrechildren", "genrecomedy", "genredrama"),
#col=rgb(55, 126, 184, 100, max=255), pch=1,
col=rgb(55, 126, 184, max=255),
cex=.10, pch=20,
diag.panel = panel.hist,
panel.contour,
gap=.25)
subsamples <- readRDS("subsamples_unique_user.rds")
set.seed(2)
subsample = subsamples[[0]]
subsample = subsamples[[1]]
subsample
#subsamples <- readRDS("subsamples_unique_user.rds")
subsamples <- readRDS("subsamples_random.rds")
set.seed(31337)
time <- list()
nobs <- list()
library('mbest')
library("devtools", quietly=TRUE)
library("methods", quietly=TRUE)
#subsamples <- readRDS("subsamples_unique_user.rds")
subsamples <- readRDS("subsamples_random.rds")
set.seed(31337)
time <- list()
nobs <- list()
ngroup <- list()
get.time <- function(t) {
with(as.list(summary(t)), user + system)
}
all_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
nobs[[i]] <- nrow(subsample)
ngroup[[i]] <- nlevels(subsample$group)
iter_start_time <- proc.time()
time[[i]] <- system.time({
model <- mhglm(y ~ x - 1 + (z - 1 | group), data = subsample,
family=binomial)
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobs[[i]], ngroup = ngroup[[i]])
}
#saveRDS(all_results, "mhglm_all_subsamples.rds")
saveRDS(all_results, "mhglm_all_subsamples_random.rds")
subsamples <- readRDS("subsamples_unique_user.rds")
set.seed(31337)
time <- list()
nobs <- list()
ngroup <- list()
get.time <- function(t) {
with(as.list(summary(t)), user + system)
}
all_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
nobs[[i]] <- nrow(subsample)
ngroup[[i]] <- nlevels(subsample$group)
iter_start_time <- proc.time()
time[[i]] <- system.time({
model <- mhglm(y ~ x - 1 + (z - 1 | group), data = subsample,
family=binomial)
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
time=time[[i]], nobs = nobs[[i]], ngroup = ngroup[[i]])
}
saveRDS(all_results, "mhglm_all_subsamples.rds")
control <- glmerControl(calc.derivs = FALSE,
check.nobs.vs.nlev = "ignore",
check.nlev.gtr.1 = "ignore",
check.nobs.vs.nRE = "ignore",
check.rankX = "stop.deficient",
check.scaleX = "warning")
nAGQ <- 0L
all_results <- list()
time_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
# Start timing this iteration
iter_start_time <- proc.time()
time_results[[i]] <- system.time({
model <- with(subsample, glmer(y ~ x - 1 + (z - 1 | group), family=binomial,
control=control, nAGQ=nAGQ))
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
converged <- is.null(model@optinfo$conv$lme4)
iter <- model@optinfo$feval
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
converged=converged, iter=iter, time=time_results[[i]])
saveRDS(all_results[[i]], paste0("lme4_subsample_unique_user", i, ".rds"))
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
}
subsamples <- readRDS("lme4_all_subsamples.rds")
subsamples
# Example of a large list with 10 elements, each having a $time component
# Replace this with your actual large list
large_list <- list(
list(time = 1, other_info = "a"),
list(time = 2, other_info = "b"),
# ... more elements ...
list(time = 10, other_info = "j")
)
subsamples$time
subsamples[[1]]$time
subsamples <- readRDS("lme4_all_subsamples.rds")
print(subsamples[[1]]$time, subsamples[[2]]$time)
print(subsamples[[1]]$time)
print(subsamples[[1]]$time)
print(subsamples[[2]]$time)
print(subsamples[[3]]$time)
print(subsamples[[4]]$time)
print(subsamples[[5]]$time)
print(subsamples[[6]]$time)
print(subsamples[[7]]$time)
print(subsamples[[8]]$time)
print(subsamples[[9]]$time)
print(subsamples[[10]]$time)
#subsamples <- readRDS("subsamples_unique_user.rds")
subsamples <- readRDS("subsamples_random.rds")
control <- glmerControl(calc.derivs = FALSE,
check.nobs.vs.nlev = "ignore",
check.nlev.gtr.1 = "ignore",
check.nobs.vs.nRE = "ignore",
check.rankX = "stop.deficient",
check.scaleX = "warning")
nAGQ <- 0L
all_results <- list()
time_results <- list()
for(i in 1:length(subsamples)) {
subsample <- subsamples[[i]]
# Start timing this iteration
iter_start_time <- proc.time()
time_results[[i]] <- system.time({
model <- with(subsample, glmer(y ~ x - 1 + (z - 1 | group), family=binomial,
control=control, nAGQ=nAGQ))
})
fixef <- fixef(model)
fixef.vcov <- as.matrix(vcov(model))
ranef <- as.matrix(ranef(model)[["group"]])
ranef.cov <- VarCorr(model)[["group"]]
attr(ranef.cov, "stddev") <- NULL
attr(ranef.cov, "correlation") <- NULL
yhat <- fitted.values(model)
converged <- is.null(model@optinfo$conv$lme4)
iter <- model@optinfo$feval
all_results[[i]] <- list(fixef=fixef, fixef.vcov=fixef.vcov,
ranef=ranef, ranef.cov=ranef.cov, yhat=yhat,
converged=converged, iter=iter, time=time_results[[i]])
saveRDS(all_results[[i]], paste0("lme4_subsample_unique_user", i, ".rds"))
# Calculate and print the time taken for this iteration
iter_time_taken <- proc.time() - iter_start_time
cat("Iteration", i, "is done. Time taken:", iter_time_taken['elapsed'], "seconds\n")
}
